{"componentChunkName":"component---src-templates-resource-detail-index-jsx","path":"/en-US/blog/docker-network-analyze","result":{"data":{"locales":{"edges":[{"node":{"ns":"translation","data":"{\"Documentation\":\"Documentation\",\"FAQ\":\"FAQ\",\"NEXT\":\"NEXT\",\"PREV\":\"PREV\",\"Product List\":\"Applications\",\"ALL\":\"ALL\",\"No relevant data found\":\"No relevant data found\",\"Get it Now\":\"Get it Now\",\"Overview\":\"Overview\",\"Highlights\":\"Highlights\",\"Description\":\"Description\",\"Related Applications\":\"Related Applications\",\"Learning Materials\":\"Learning Materials\",\"Classification\":\"Classification\",\"Os\":\"Os\",\"Open Source License\":\"Open Source License\",\"Support Language\":\"Support Language\",\"Languages\":\"Languages\",\"Solution\":\"Solution\",\"Resource\":\"Resource\",\"Applicable Personnel\":\"Applicable Personnel\",\"Resource List\":\"Resource List\",\"Official Website\":\"Official Website\",\"Feedback\":\"Feedback\",\"Submit A Suggestion\":\"Submit A Suggestion\",\"Get Professional Services\":\"Get Professional Services\",\"Tags\":\"Tags\",\"Author\":\"Author\",\"Related Reading\":\"Related Reading\",\"Resource Center\":\"Resource Center\",\"Challengeg\":\"Challengeg\",\"How do we solve it?\":\"How do we solve it?\",\"More solution\":\"More solution\",\"Type of asset\":\"Type of asset\",\"Categories\":\"Categories\",\"Resource Download\":\"Resource Download\",\"Discover Now\":\"Discover Now\",\"Become a Partner\":\"Become a Partner\",\"Invoicing\":\"Invoicing\",\"7×24 Tickets\":\"7×24 Tickets\",\"BROWSE ALL\":\"BROWSE ALL\",\"Services List\":\"Services List\",\"Service Type\":\"Service Type\",\"Service Object\":\"Service Object\",\"Content directory\":\"Content directory\",\"mo\":\"mo\",\"y\":\"y\",\"Benefit\":\"Benefit\",\"What do we do\":\"What do we do\",\"Cases\":\"Cases\",\"Purchase and price\":\"Purchase and price\",\"Service portfolio\":\"Service portfolio\",\"Related Services\":\"Related Services\",\"Business insight\":\"Business insight\",\"Components\":\"Components\",\"Copyright\":\"© 2022 Websoft9. All Rights Reserved.\",\"Company summary\":\"Provide users with simple serial applications to help software operators create global cloud-based online business commerce\",\"Applications\":\"Applications\",\"SHARE\":\"SHARE\"}","language":"en-US"}}]},"site":{"siteMetadata":{"copyright":"Copyright","description":"Company summary","siteUrl":"https://www.websoft9.com","socials":[{"icon":"fab fa-github social-link-icon","id":1,"link":"https://github.com/","title":"github"},{"icon":"fab fa-twitter social-link-icon","id":2,"link":"https://www.twitter.com","title":"Twitter"},{"icon":"fab fa-instagram social-link-icon","id":3,"link":"https://www.instagram.com","title":"Instagram"},{"icon":"fab fa-linkedin social-link-icon","id":4,"link":"https://www.linkedin.com","title":"Linkedin"},{"icon":"fab fa-pinterest social-link-icon","id":5,"link":"https://pinterest.com","title":"Pinterest"}]}},"RelatedReading":{"nodes":[{"id":"b04cd64d-6a5a-5489-ad4f-902ddefae040","slug":"digtal-committee-start-changsha","title":"数字经济专业委员会在长沙成立，Websoft9 助力传统企业转型","time":null,"image":"https://libs.websoft9.com/Websoft9/resource/blog/2022/10/digtal-commit-start-cs.jpg","type":{"id":"53d881b6-0253-56d0-b8de-0d06d834b608","key":"news","title":"News"}},{"id":"d56d83d8-db66-52f6-b1b1-00e894db4e02","slug":"software-supply-chain","title":"Software Supply Chain","time":null,"image":"https://libs.websoft9.com/Websoft9/resource/solution/softwarescm-feature-websoft9.png","type":{"id":"f26470e4-249e-5966-b8fb-d7e620a71e65","key":"solution","title":"Solution"}},{"id":"6dea9576-1832-5aa0-8ef1-8d51867af2d9","slug":"open-knowledge-base","title":"Open knowledge base","time":null,"image":"https://libs.websoft9.com/Websoft9/resource/solution/open-km-hero-websoft9.webp","type":{"id":"f26470e4-249e-5966-b8fb-d7e620a71e65","key":"solution","title":"Solution"}}]},"allContentfulResource":{"nodes":[{"id":"36efd381-14fe-5a74-913a-e61250dbc8f3","slug":"docker-network-analyze","title":"Docker 网络解读","description":null,"image":null,"type":{"id":"7fcfc4bf-1c58-5656-ae8a-2bea41e47111","key":"blog","title":"Blog"},"author":[{"id":"57d53346-00d0-5b5e-9497-22ea3517bfbe","title":"CEO","fullName":"Websoft9","pictureUrl":"https://libs.websoft9.com/Websoft9/logo/person/cdl.jpeg","customer":null}],"content":{"id":"5277e7f5-63e3-568f-812c-3c3f7386ca9f","content":"Docker 容器在运行时，会涉及多个容器相互连接，甚至与宿主机上的应用连接的问题。既然需要产生连接，那么就必然要依赖网络。  \n\n网络在Docker的技术体系中，是一个不容易搞清楚的要点。因此，希望您读完本文之后，对 Docker 网络有一个通透的理解。\n\n## 网络定义\n\n首先，我们花几分钟的时间，回顾网络是什么。\n\n网络不仅仅是计算机术语，在我们的生活中，网络无处不在。\n\n任何一个被称之为网络的事物都是由“终端节点+中心节点”组成。如果多个小的网络联合起来，就组成了大网络。\n\n![](https://libs.websoft9.com/Websoft9/blog/zh/2020/09/what-is-network-hub-websoft9.png)\n\n* 在计算机网络中这个中心节点可被称之为：网桥或交换机或HUB。  \n* 在快递业网络中这个中心节点可被称之为：转运中心或中心仓\n* 在人际关系网络这个中心节点可被称之为：核心人物或有影响力的人\n* 在陆地的水网中这个中心节点可被称之为：湖泊或多河交汇处\n* 在太阳系网络中这个中心节点可以被成为：太阳\n\n这里有一个概念值得注意，不管是是终端节点还是中心节点，它们都是节点。即它们的“物理属性”是一个层面，而逻辑上的分工又不是一个层面。\n\n节点与节点连接起来，就组成网络。中心节点对（网络）内起着与其他终端节点沟通的作用，对（网络）外起着与外部连接的功能，甚至是连接外部的唯一通道。\n\n其实，只要能够分辨清楚哪些是终端节点，哪些是中心节点，就完全从宏观上把握住了网络。剩下的，就是搞清楚它们之间的数据流向。\n\n## Docker 网络\n\n为了了解 Docker 网络，我们先在已经运行 Docker 的主机上运行一条命令 `docker network ls`\n```\n[root@iZ8vb7iZ ~]# docker network ls\nNETWORK ID          NAME                      DRIVER              SCOPE\n06008f57697f        blogwebsoft9com_default   bridge              local\nf13768fd7a20        bridge                    bridge              local\n7d6412aa6e40        host                      host                local\ne5e6049b8d9f        none                      null                local\n29eae24dae84        portainer_default         bridge              local\nb286f40bc93d        websoft9com_default       bridge              local\n```\n\n以上显示的就是 Docker 管辖的所有中心节点网卡（先不称之为网络）名称。而容器内部也有网卡，但不会在此命令中列出。\n\n> 网卡也被称之为网络接口\n\nDocker 的网络中，每一个运行中的容器就是网络中的终端节点，这个很好理解。\n\n**那么谁是 Docker 网络的中心节点呢？**\n\n要正确理解这个问题，先熟悉一个 Docker 网络相关的设计：在安装 Docker 时，Docker 会自动创建三个（虚拟）中心节点网卡，同时宿主机上创建一个名称为 docker0 的（虚拟）中心网卡。\n\n下面分别介绍 Docker 内部的三个网卡：\n\n1. Bridge 网卡（默认）：如果创建容器的时候选择连接此网卡，Docker 会为每一个容器分配、设置IP等，并通过宿主机的 docker0 网卡与外部通信。\n  ```\n  sudo docker run -it  phpmyadmin\n  ```\n2. host 网卡：如果创建容器的时候选择连接此网卡，Docker 不会为容器创建网卡和IP地址，而是直接使用宿主机的IP和端口。\n  ```\n  sudo docker run -it --net=\"host\" phpmyadmin\n  ```\n\n3. None 网卡：如果创建容器的时候选择连接此网卡，则以为着 Docker 关闭了容器的网络功能。\n\n如果您读到此处，仍然一知半解，我想可能需要向您澄清一个概念。\n\n**网卡、中心节点和网络**\n\n网络上绝大部分关于 Docker 网络相关的博客，都没有仔细斟酌网络这个词的用法，不该出现的“网络”的地方错用了这个词，很容易让读者无法理解本质。\n\n所以我们再回顾一次：\n\n* **网卡**：用户与外部通信的计算机网络组建，它可以是虚拟的，也可以是物理上存在看得见的网卡。在现在这个软件定义网络的时代，网卡一般都是虚拟的。但不管是哪种形式的网卡，通过`ifconfig`命令查看，可知其格式基本一致\n    ```\n\n    docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500\n            inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n            inet6 fe80::42:f6ff:fead:46  prefixlen 64  scopeid 0x20<link>\n            ether 02:42:f6:ad:00:46  txqueuelen 0  (Ethernet)\n            RX packets 2831  bytes 2150398 (2.0 MiB)\n            RX errors 0  dropped 0  overruns 0  frame 0\n            TX packets 2406  bytes 682422 (666.4 KiB)\n            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n    eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n            inet 172.26.72.241  netmask 255.255.240.0  broadcast 172.26.79.255\n            inet6 fe80::216:3eff:fe0a:e07c  prefixlen 64  scopeid 0x20<link>\n            ether 00:16:3e:0a:e0:7c  txqueuelen 1000  (Ethernet)\n            RX packets 1146393  bytes 760158453 (724.9 MiB)\n            RX errors 0  dropped 0  overruns 0  frame 0\n            TX packets 836693  bytes 355058824 (338.6 MiB)\n            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n    ```\n\n* **中心节点**：网卡中有一种特殊网卡，我们称之为中心节点网卡或网桥，其他的网卡都与之相连，由它负责内部网卡之间的通信和外部的通信出口中转。\n\n* **网络**：多个网卡之间通过某种形式组合起来，可以按设计进行通信，就形成了网络。网络一般采用“中心节点+多个终端节点”的组网模式。\n\n## 端口\n\n容器中端口与服务器的端口是一个概念。\n\n端口即应用程序在网卡中占用的访问通道。例如：一个容器中安装了 Apache 和 MySQL 两个软件，而这个容器只有一个虚拟网卡，如何保证两个软件都可以被外界访问又互不干扰？\n\n计算机的设计者会给网卡虚拟很多访问通道，并给与从0到65535的数字编号，这个编号就是端口。需要用到网络通道的软件可以配置不同的数字编号，比如：Apache 使用 80 端口，MySQL 使用 3306 端口。\n\n拿一个真实世界的例子可能更有助于理解端口。\n\n比如去一栋办公大楼（只有一个门牌地址），如何保证各种不同的人群安全有序的进出？\n一般来说，管理非常规范的办公楼可能会有：员工通道（001号门）、访客通道（002号门）、消防通道（003号门）、物流通道（004号门）等各种不同的门，不同的人群通过不同的通道进出，其中每一个门就相当于一个端口。\n\n## 外网访问\n\n理解了上面的 Docker 网络模式之后，在设置 Docker 容器被外网访问就变得非常简单。\n\n常见的容器通信常见包括：\n\n* 容器之间通信\n* 容器与宿主机通信\n* 容器直接与外部网络通信\n\n## 常见问题\n\n#### 容器互联 -link 有什么作用？\n\n用于在两个容器之间创建一个之间连接的虚拟通道（在 /etc/hosts 文件中增加被连接的容器名称和IP信息），而不必通过网桥连接。\n\n#### 可以直接修改 iptable 实现容器的外网访问控制吗？\n\n可以，但是比较复杂。\n\n#### 创建容器的时候，不指定容器的网卡名称系统会自动命名吗？\n\n会。一般以当前目录文件夹名称+default，例如：blogwebsoft9com_default 这个网卡的名称来源于在blog.websoft9.com目录下基于 docker-compose 创建容器\n\n#### docker-compose 启动容器（组）会自动创建中心网卡吗？\n\n会\n\n#### docker run 启动容器会自动创建网卡吗？\n\n不会，默认使用已经存在的 bridge\n\n#### docker network ls 查看到的网卡与宿主机下 ifconfig 有什么联系？\n\ndocker network ls 查看到的网卡也会被显示到宿主机下","childMarkdownRemark":{"html":"<p>Docker 容器在运行时，会涉及多个容器相互连接，甚至与宿主机上的应用连接的问题。既然需要产生连接，那么就必然要依赖网络。</p>\n<p>网络在Docker的技术体系中，是一个不容易搞清楚的要点。因此，希望您读完本文之后，对 Docker 网络有一个通透的理解。</p>\n<h2>网络定义</h2>\n<p>首先，我们花几分钟的时间，回顾网络是什么。</p>\n<p>网络不仅仅是计算机术语，在我们的生活中，网络无处不在。</p>\n<p>任何一个被称之为网络的事物都是由“终端节点+中心节点”组成。如果多个小的网络联合起来，就组成了大网络。</p>\n<p><img src=\"https://libs.websoft9.com/Websoft9/blog/zh/2020/09/what-is-network-hub-websoft9.png\" alt=\"\"></p>\n<ul>\n<li>在计算机网络中这个中心节点可被称之为：网桥或交换机或HUB。</li>\n<li>在快递业网络中这个中心节点可被称之为：转运中心或中心仓</li>\n<li>在人际关系网络这个中心节点可被称之为：核心人物或有影响力的人</li>\n<li>在陆地的水网中这个中心节点可被称之为：湖泊或多河交汇处</li>\n<li>在太阳系网络中这个中心节点可以被成为：太阳</li>\n</ul>\n<p>这里有一个概念值得注意，不管是是终端节点还是中心节点，它们都是节点。即它们的“物理属性”是一个层面，而逻辑上的分工又不是一个层面。</p>\n<p>节点与节点连接起来，就组成网络。中心节点对（网络）内起着与其他终端节点沟通的作用，对（网络）外起着与外部连接的功能，甚至是连接外部的唯一通道。</p>\n<p>其实，只要能够分辨清楚哪些是终端节点，哪些是中心节点，就完全从宏观上把握住了网络。剩下的，就是搞清楚它们之间的数据流向。</p>\n<h2>Docker 网络</h2>\n<p>为了了解 Docker 网络，我们先在已经运行 Docker 的主机上运行一条命令 <code>docker network ls</code></p>\n<pre><code>[root@iZ8vb7iZ ~]# docker network ls\nNETWORK ID          NAME                      DRIVER              SCOPE\n06008f57697f        blogwebsoft9com_default   bridge              local\nf13768fd7a20        bridge                    bridge              local\n7d6412aa6e40        host                      host                local\ne5e6049b8d9f        none                      null                local\n29eae24dae84        portainer_default         bridge              local\nb286f40bc93d        websoft9com_default       bridge              local\n</code></pre>\n<p>以上显示的就是 Docker 管辖的所有中心节点网卡（先不称之为网络）名称。而容器内部也有网卡，但不会在此命令中列出。</p>\n<blockquote>\n<p>网卡也被称之为网络接口</p>\n</blockquote>\n<p>Docker 的网络中，每一个运行中的容器就是网络中的终端节点，这个很好理解。</p>\n<p><strong>那么谁是 Docker 网络的中心节点呢？</strong></p>\n<p>要正确理解这个问题，先熟悉一个 Docker 网络相关的设计：在安装 Docker 时，Docker 会自动创建三个（虚拟）中心节点网卡，同时宿主机上创建一个名称为 docker0 的（虚拟）中心网卡。</p>\n<p>下面分别介绍 Docker 内部的三个网卡：</p>\n<ol>\n<li>Bridge 网卡（默认）：如果创建容器的时候选择连接此网卡，Docker 会为每一个容器分配、设置IP等，并通过宿主机的 docker0 网卡与外部通信。</li>\n</ol>\n<pre><code>sudo docker run -it  phpmyadmin\n</code></pre>\n<ol start=\"2\">\n<li>host 网卡：如果创建容器的时候选择连接此网卡，Docker 不会为容器创建网卡和IP地址，而是直接使用宿主机的IP和端口。</li>\n</ol>\n<pre><code>sudo docker run -it --net=\"host\" phpmyadmin\n</code></pre>\n<ol start=\"3\">\n<li>None 网卡：如果创建容器的时候选择连接此网卡，则以为着 Docker 关闭了容器的网络功能。</li>\n</ol>\n<p>如果您读到此处，仍然一知半解，我想可能需要向您澄清一个概念。</p>\n<p><strong>网卡、中心节点和网络</strong></p>\n<p>网络上绝大部分关于 Docker 网络相关的博客，都没有仔细斟酌网络这个词的用法，不该出现的“网络”的地方错用了这个词，很容易让读者无法理解本质。</p>\n<p>所以我们再回顾一次：</p>\n<ul>\n<li>\n<p><strong>网卡</strong>：用户与外部通信的计算机网络组建，它可以是虚拟的，也可以是物理上存在看得见的网卡。在现在这个软件定义网络的时代，网卡一般都是虚拟的。但不管是哪种形式的网卡，通过<code>ifconfig</code>命令查看，可知其格式基本一致</p>\n<pre><code>\ndocker0: flags=4099&#x3C;UP,BROADCAST,MULTICAST>  mtu 1500\n        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255\n        inet6 fe80::42:f6ff:fead:46  prefixlen 64  scopeid 0x20&#x3C;link>\n        ether 02:42:f6:ad:00:46  txqueuelen 0  (Ethernet)\n        RX packets 2831  bytes 2150398 (2.0 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 2406  bytes 682422 (666.4 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\neth0: flags=4163&#x3C;UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 172.26.72.241  netmask 255.255.240.0  broadcast 172.26.79.255\n        inet6 fe80::216:3eff:fe0a:e07c  prefixlen 64  scopeid 0x20&#x3C;link>\n        ether 00:16:3e:0a:e0:7c  txqueuelen 1000  (Ethernet)\n        RX packets 1146393  bytes 760158453 (724.9 MiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 836693  bytes 355058824 (338.6 MiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre>\n</li>\n<li>\n<p><strong>中心节点</strong>：网卡中有一种特殊网卡，我们称之为中心节点网卡或网桥，其他的网卡都与之相连，由它负责内部网卡之间的通信和外部的通信出口中转。</p>\n</li>\n<li>\n<p><strong>网络</strong>：多个网卡之间通过某种形式组合起来，可以按设计进行通信，就形成了网络。网络一般采用“中心节点+多个终端节点”的组网模式。</p>\n</li>\n</ul>\n<h2>端口</h2>\n<p>容器中端口与服务器的端口是一个概念。</p>\n<p>端口即应用程序在网卡中占用的访问通道。例如：一个容器中安装了 Apache 和 MySQL 两个软件，而这个容器只有一个虚拟网卡，如何保证两个软件都可以被外界访问又互不干扰？</p>\n<p>计算机的设计者会给网卡虚拟很多访问通道，并给与从0到65535的数字编号，这个编号就是端口。需要用到网络通道的软件可以配置不同的数字编号，比如：Apache 使用 80 端口，MySQL 使用 3306 端口。</p>\n<p>拿一个真实世界的例子可能更有助于理解端口。</p>\n<p>比如去一栋办公大楼（只有一个门牌地址），如何保证各种不同的人群安全有序的进出？\n一般来说，管理非常规范的办公楼可能会有：员工通道（001号门）、访客通道（002号门）、消防通道（003号门）、物流通道（004号门）等各种不同的门，不同的人群通过不同的通道进出，其中每一个门就相当于一个端口。</p>\n<h2>外网访问</h2>\n<p>理解了上面的 Docker 网络模式之后，在设置 Docker 容器被外网访问就变得非常简单。</p>\n<p>常见的容器通信常见包括：</p>\n<ul>\n<li>容器之间通信</li>\n<li>容器与宿主机通信</li>\n<li>容器直接与外部网络通信</li>\n</ul>\n<h2>常见问题</h2>\n<h4>容器互联 -link 有什么作用？</h4>\n<p>用于在两个容器之间创建一个之间连接的虚拟通道（在 /etc/hosts 文件中增加被连接的容器名称和IP信息），而不必通过网桥连接。</p>\n<h4>可以直接修改 iptable 实现容器的外网访问控制吗？</h4>\n<p>可以，但是比较复杂。</p>\n<h4>创建容器的时候，不指定容器的网卡名称系统会自动命名吗？</h4>\n<p>会。一般以当前目录文件夹名称+default，例如：blogwebsoft9com_default 这个网卡的名称来源于在blog.websoft9.com目录下基于 docker-compose 创建容器</p>\n<h4>docker-compose 启动容器（组）会自动创建中心网卡吗？</h4>\n<p>会</p>\n<h4>docker run 启动容器会自动创建网卡吗？</h4>\n<p>不会，默认使用已经存在的 bridge</p>\n<h4>docker network ls 查看到的网卡与宿主机下 ifconfig 有什么联系？</h4>\n<p>docker network ls 查看到的网卡也会被显示到宿主机下</p>"}},"persons":null,"customers":null,"products":null,"solutions":null,"tags":null,"time":"2020-09-08","downloadUrl":null}]}},"pageContext":{"slug":"docker-network-analyze","breadcrumb":{"location":"/en-US/blog/docker-network-analyze","crumbs":[{"pathname":"/","crumbLabel":"Home"},{"pathname":"/en-US","crumbLabel":"en-US"},{"pathname":"/en-US/blog","crumbLabel":"blog"},{"pathname":"/en-US/blog/docker-network-analyze","crumbLabel":"docker-network-analyze"}]},"language":"en-US","i18n":{"language":"en-US","languages":["en-US","zh-CN"],"defaultLanguage":"zh-CN","generateDefaultLanguagePage":false,"routed":true,"originalPath":"/blog/docker-network-analyze","path":"en-US/blog/docker-network-analyze"}}},"staticQueryHashes":["2390569662","3367695531","3666294474","3881056605","931386620"]}